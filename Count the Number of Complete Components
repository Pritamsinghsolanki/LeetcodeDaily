```
You are given an integer n. There is an undirected graph with n vertices, numbered from 0 to n - 1. You are given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting vertices ai and bi.

Return the number of complete connected components of the graph.

A connected component is a subgraph of a graph in which there exists a path between any two vertices, and no vertex of the subgraph shares an edge with a vertex outside of the subgraph.

A connected component is said to be complete if there exists an edge between every pair of its vertices
```
class Solution {
public:
    void dfs(int n,vector<vector<int>>& dp,vector<bool> mark,int& x,int& y){
       if(mark[n]) return;
       mark[n]=true;
       ++x;
       y+=dp[n].size();
       for(auto a:dp[n])
          dfs(a,dp,mark,x,y);
       }
    }
    int countCompleteComponents(int n, vector<vector<int>>& edges) {
        vector<vector<int>> graph;
        for(const auto&edge: edges){
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
       vector<bool> mark;
       int ans=0;
       
       for(int i=0;i<n;i++){
          if(mark[i]!=0){
              int x=0,y=0;
              dfs(i,graph,mark,x,y);
              ans+= x*(x-1)==y;
          }
       }
       return ans;
    }
    
};
